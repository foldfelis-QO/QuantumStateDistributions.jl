export
    qpdf,
    qpdf!

"""
    q_pdf([T=Float64], œÅ::AbstractArray, Œ∏::Real, x::Real)

Quadrature prabability at point (Œ∏, x)

    q_pdf([T=Float64], œÅ::AbstractArray, Œ∏s::AbstractRange, xs::AbstractRange)

Quadrature prabability at points (Œ∏s, xs)
"""
qpdf(œÅ, Œ∏, x) = qpdf(Float64, œÅ, Œ∏, x)

function qpdf(T::Type{<:Real}, œÅ, Œ∏::Real, x::Real)
    dim = size(œÅ, 1)
    ùõëÃÇ_res = Matrix{Complex{T}}(undef, dim, dim)

    return qpdf!(ùõëÃÇ_res, œÅ, Œ∏, x)
end

function qpdf!(ùõëÃÇ_res::AbstractMatrix, œÅ::AbstractArray, Œ∏::Real, x::Real)
    dim = size(œÅ, 1)

    return real_tr_mul(ùõëÃÇ!(ùõëÃÇ_res, Œ∏, x, dim=dim), œÅ)
end

function qpdf(T::Type{<:Real}, œÅ, Œ∏s::AbstractRange, xs::AbstractRange)
    dim = size(œÅ, 1)
    ùõëÃÇ_res_vec = [Matrix{Complex{T}}(undef, dim, dim) for _ in 1:Threads.nthreads()]
    ùê© = Matrix{T}(undef, length(Œ∏s), length(xs))

    return qpdf!(ùõëÃÇ_res_vec, ùê©, œÅ, Œ∏s, xs)
end

function qpdf!(ùõëÃÇ_res_vec::AbstractVector{Matrix{Complex{T}}}, ùê©::Matrix{T}, œÅ::AbstractArray, Œ∏s::AbstractRange, xs::AbstractRange) where {T}
    @sync for (j, x) in enumerate(xs)
        for (i, Œ∏) in enumerate(Œ∏s)
            Threads.@spawn ùê©[i, j] = qpdf!(ùõëÃÇ_res_vec[Threads.threadid()], œÅ, Œ∏, x)
        end
    end

    return ùê©
end

##### for arb. state in intensity-to-measurement-phase quadrature coordinate #####

# |Œ∏, x‚ü© = ‚àë‚Çô |n‚ü© ‚ü®n|Œ∏, x‚ü© = ‚àë‚Çô œà‚Çô(Œ∏, x) |n‚ü©
# ‚ü®n|Œ∏, x‚ü© = œà‚Çô(Œ∏, x) = exp(im n Œ∏) (2/œÄ)^(1/4) exp(-x^2) H‚Çô(‚àö2 x)/‚àö(2^n n!)
function œà‚Çô(n::Integer, Œ∏::Real, x::Real)
    return (2/œÄ)^(1/4) * exp(im*n*Œ∏ - x^2) * hermiteh(n, sqrt(2)x) / sqrt(2^n * factorial(n))
end

function ùõëÃÇ!(result::AbstractMatrix{<:Complex}, Œ∏::Real, x::Real; dim)
    view(result, :, 1) .= œà‚Çô.(big.(0:dim-1), Œ∏, x)
    result .= view(result, :, 1) * view(result, :, 1)'

    return result
end

function ùõëÃÇ(T::Type{<:Complex}, Œ∏::Real, x::Real; dim)
    result = Matrix{T}(undef, dim, dim)

    return ùõëÃÇ!(result, Œ∏, x, dim=dim)
end

ùõëÃÇ(Œ∏::Real, x::Real; dim) = ùõëÃÇ(ComplexF64, Œ∏, x, dim=dim)

# #########
# # utils #
# #########

real_tr_mul(ùêö, ùêõ) = sum(real(ùêö[i, :]' * ùêõ[:, i]) for i in 1:size(ùêö, 1))
