export
    PositivePreservingIterator,
    next!,
    run!

mutable struct PositivePreservingIterator{S, T}
    dim::S
    œÄÃÇs::Vector{Matrix{Complex{T}}}
    œÅ::Matrix{Complex{T}}
    steps::S
end

function PositivePreservingIterator(data::Matrix{T}, steps::S; dim::S) where {T<:Real, S<:Integer}
    œÄÃÇs = [Matrix{Complex{T}}(undef, dim, dim) for _ in 1:size(data, 2)]
    @sync for j in 1:size(data, 2)
        Threads.@spawn ùõëÃÇ!(œÄÃÇs[j], data[:, j]..., dim=dim)
    end

    œÅ = glorot_uniform(Complex{T}, dim)
    œÅ ./= tr(œÅ)

    return PositivePreservingIterator{S, T}(dim, œÄÃÇs, œÅ, steps)
end

"""
``\\sum_j \\frac{\\hat{\\pi_j}}{p_j}``
"""
function frac_œÄ_p(ppit::PositivePreservingIterator{S, T}) where {S, T}
    sum_frac_œÄ‚±º_p‚±º = zeros(Complex{T}, ppit.dim, ppit.dim)

    for œÄÃÇ in ppit.œÄÃÇs
        sum_frac_œÄ‚±º_p‚±º .+= œÄÃÇ ./ tr_mul(œÄÃÇ, ppit.œÅ)
    end

    return sum_frac_œÄ‚±º_p‚±º
end


function next!(ppit::PositivePreservingIterator)
    ùê´ = frac_œÄ_p(ppit)

    ppit.œÅ .= ùê´ * ppit.œÅ * ùê´
    ppit.œÅ ./= tr(ppit.œÅ)

    return ppit.œÅ
end

function run!(ppit::PositivePreservingIterator)
    p = Progress(ppit.steps)
    for _ in 1:ppit.steps
        next!(ppit)
        ProgressMeter.next!(p)
    end
end


# #########
# # utils #
# #########

glorot_uniform(T::Type{<:Real}, rng::AbstractRNG, dim) = (rand(rng, T, dim, dim) .- 0.5) .* sqrt(24 / 2dim)

glorot_uniform(::Type{Complex{U}}, rng, dim) where {U} = glorot_uniform(U, rng, dim) + im * glorot_uniform(U, rng, dim)

glorot_uniform(T, dim) = glorot_uniform(T, Random.GLOBAL_RNG, dim)

tr_mul(ùêö, ùêõ) = sum(ùêö[i, :]' * ùêõ[:, i] for i in 1:size(ùêö, 1))
