var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = QuantumStateDistributions","category":"page"},{"location":"#QuantumStateDistributions","page":"Home","title":"QuantumStateDistributions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for QuantumStateDistributions.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package can be installed with the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add QuantumStateDistributions","category":"page"},{"location":"#Quick-start","page":"Home","title":"Quick start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Construct a squeezed state via QuantumStateBase.jl and declare its quantum state distribution.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using QuantumStateDistributions, QuantumStateBase\n\njulia> r, Œ∏, dim = 0.8, œÄ/2, 100;\n\njulia> œÅ = SqueezedState(r, Œ∏, Matrix, dim=dim)\n100√ó100 Matrix{ComplexF64}:\n       0.7477+0.0im          0.0+0.0im  ‚Ä¶  -1.77607e-24-5.91946e-10im  0.0+0.0im\n          0.0+0.0im          0.0+0.0im              0.0+0.0im          0.0+0.0im\n -2.14974e-17+0.351079im     0.0+0.0im      2.77945e-10-8.16923e-25im  0.0+0.0im\n          0.0+0.0im          0.0+0.0im              0.0+0.0im          0.0+0.0im\n             ‚ãÆ                          ‚ã±\n          0.0+0.0im          0.0+0.0im              0.0+0.0im          0.0+0.0im\n -1.77607e-24+5.91946e-10im  0.0+0.0im      4.68637e-19+0.0im          0.0+0.0im\n          0.0+0.0im          0.0+0.0im              0.0+0.0im          0.0+0.0im\n\njulia> d = GaussianStateBHD(œÅ);","category":"page"},{"location":"","page":"Home","title":"Home","text":"Sample a point from the quantum state distribution in intensity-to-measurement-phase quadrature coordinate measured by balanced homodyne detection:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> rand(d)\n2-element Vector{Float64}:\n 0.8420476666965236\n 1.6008878775912423","category":"page"},{"location":"","page":"Home","title":"Home","text":"Sample n points from the quantum state distribution:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> rand(d, 4096)\n2√ó4096 Matrix{Float64}:\n  0.0018714   0.0034182   0.00403972  0.00780472  ‚Ä¶   6.27393  6.27811    6.27884\n -0.706334   -1.16179    -0.195581    0.174201       -0.60763  0.853457  -0.217017","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"#Estemate-density-matrix-of-a-quantum-state-via-MLE","page":"Home","title":"Estemate density matrix of a quantum state via MLE","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Generate some data from a squeezed state:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> data = rand(d, 81920);","category":"page"},{"location":"","page":"Home","title":"Home","text":"Construct a PositivePreservingIterator:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> t = 50;\n\njulia> ppit = PositivePreservingIterator(data, t, dim=35);","category":"page"},{"location":"","page":"Home","title":"Home","text":"Estermate density matrix:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> run!(ppit)\n\njulia> œÅ_mle = ppit.œÅ","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#APIs","page":"Home","title":"APIs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [QuantumStateDistributions]","category":"page"},{"location":"#QuantumStateDistributions.GaussianStateBHD","page":"Home","title":"QuantumStateDistributions.GaussianStateBHD","text":"GaussianStateBHD\n\nA Gaussian state distribution in intensity-to-measurement-phase quadrature coordinate measured by balanced homodyne detection.\n\nExample\n\njulia> using QuantumStateBase\n\njulia> d = GaussianStateBHD(SqueezedState(0.8, œÄ, Matrix, dim=100));\n\njulia> points = rand(d, 4096);\n\n\n\n\n\n","category":"type"},{"location":"#QuantumStateDistributions.PositivePreservingIterator-Union{Tuple{S}, Tuple{T}, Tuple{Matrix{T}, S}} where {T<:Real, S<:Integer}","page":"Home","title":"QuantumStateDistributions.PositivePreservingIterator","text":"PositivePreservingIterator(data::Matrix, steps::Integer; dim::Integer)\n\nThe maximum likelihood estimator with the magical positive preserving iterator derived by variational calculus.\n\nExample\n\njulia> using QuantumStateBase\n\njulia> œÅ = SqueezedState(0.8, œÄ/4, Matrix, dim=100);\n\njulia> data = rand(GaussianStateBHD(œÅ), 8192);\n\njulia> œÅ_mle = run!(PositivePreservingIterator(data, 50, dim=35));\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateDistributions.frac_œÄ_p-Union{Tuple{PositivePreservingIterator{S, T}}, Tuple{T}, Tuple{S}} where {S, T}","page":"Home","title":"QuantumStateDistributions.frac_œÄ_p","text":"frac_œÄ_p(ppit::PositivePreservingIterator)\n\nA positive preserving iterator.\n\nmathcalR = sum_i frachatpi_ip_i\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateDistributions.gen_œÄÃÇs-Union{Tuple{T}, Tuple{AbstractVector{T}, AbstractVector{T}, Any}} where T<:Real","page":"Home","title":"QuantumStateDistributions.gen_œÄÃÇs","text":"gen_œÄÃÇs(Œ∏s::AbstractVector, xs::AbstractVector, dim::Integer)\n\nCalculate hatPi for all given (theta x) pairs.\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateDistributions.next!-Tuple{PositivePreservingIterator}","page":"Home","title":"QuantumStateDistributions.next!","text":"next!(ppit::PositivePreservingIterator)\n\nIterate one step with the magic positive preserving iterator.\n\nrho^t+1 = mathcalR rho^t mathcalR\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateDistributions.qpdf-Tuple{Any, Any, Any}","page":"Home","title":"QuantumStateDistributions.qpdf","text":"qpdf([T=Float64], œÅ::AbstractArray, Œ∏::Real, x::Real)\nqpdf([T=Float64], œÅ::AbstractArray, Œ∏s::AbstractRange, xs::AbstractRange)\n\nQuadrature prabability in intensity-to-measurement-phase quadrature coordinate.\n\np(rho theta x) = tr(hatPi(theta x) rho)\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateDistributions.run!-Tuple{PositivePreservingIterator}","page":"Home","title":"QuantumStateDistributions.run!","text":"run!(ppit::PositivePreservingIterator)\n\nIterate n step with the magic positive preserving iterator.\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateDistributions.œà‚Çô-Tuple{Integer, Real, Real}","page":"Home","title":"QuantumStateDistributions.œà‚Çô","text":"œà‚Çô(n::Integer, Œ∏::Real, x::Real)\n\nEigenstate of BHD measurement operator.\n\npsi_n(theta x) = langle n  theta x rangle\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateDistributions.ùõëÃÇ-Tuple{Real, Real}","page":"Home","title":"QuantumStateDistributions.ùõëÃÇ","text":"ùõëÃÇ(Œ∏::Real, x::Real; dim::Integer)\n\nBHD measurement operator.\n\nhatPi_m n(theta x) = langle m  hatPi(theta x)  n rangle = langle m  theta x rangle langle theta x  n rangle\n\n\n\n\n\n","category":"method"}]
}
